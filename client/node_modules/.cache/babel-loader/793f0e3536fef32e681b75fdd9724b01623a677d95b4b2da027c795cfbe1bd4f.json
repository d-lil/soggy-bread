{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dahne\\\\Resume\\\\soggy-bread\\\\client\\\\src\\\\components\\\\computer\\\\FileViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// A component to display the content of a file or list of files in a directory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileViewer = ({\n  repoFullName,\n  filePath\n}) => {\n  _s();\n  const [contents, setContents] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (filePath) {\n      setLoading(true);\n      setError(null);\n      console.log(`Fetching contents for: ${repoFullName}, file path: ${filePath}`);\n      // GitHub API endpoint to fetch the content of a file\n      axios.get(`https://api.github.com/repos/${repoFullName}/contents/${filePath}`).then(response => {\n        console.log(response.data);\n        // If the response is an array, it's a directory listing\n        if (Array.isArray(response.data)) {\n          setContents(response.data); // Set the directory contents\n        } else {\n          // If it's a file, decode and set the file content\n          const content = response.data.encoding === 'base64' ? atob(response.data.content) : response.data.content;\n          setContents(content);\n        }\n      }).catch(error => {\n        console.error(error);\n        setError('Failed to load file content.');\n      }).finally(() => setLoading(false));\n    }\n  }, [repoFullName, filePath]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }, this);\n\n  // If contents is an array, it's a directory listing\n  if (Array.isArray(contents)) {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: contents.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: file.name\n      }, file.sha, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If contents is a string, it's the file content\n  return /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: /*#__PURE__*/_jsxDEV(\"code\", {\n      children: contents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(FileViewer, \"CjlsYHqm5dkOjye1hFGhd71qXPg=\");\n_c = FileViewer;\nexport default FileViewer;\nvar _c;\n$RefreshReg$(_c, \"FileViewer\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","FileViewer","repoFullName","filePath","_s","contents","setContents","loading","setLoading","error","setError","console","log","get","then","response","data","Array","isArray","content","encoding","atob","catch","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","map","file","name","sha","_c","$RefreshReg$"],"sources":["C:/Users/dahne/Resume/soggy-bread/client/src/components/computer/FileViewer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// A component to display the content of a file or list of files in a directory\r\nconst FileViewer = ({ repoFullName, filePath }) => {\r\n  const [contents, setContents] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (filePath) {\r\n      setLoading(true);\r\n      setError(null);\r\n      console.log(`Fetching contents for: ${repoFullName}, file path: ${filePath}`);\r\n      // GitHub API endpoint to fetch the content of a file\r\n      axios.get(`https://api.github.com/repos/${repoFullName}/contents/${filePath}`)\r\n        .then(response => {\r\n          console.log(response.data);\r\n          // If the response is an array, it's a directory listing\r\n          if (Array.isArray(response.data)) {\r\n            setContents(response.data); // Set the directory contents\r\n          } else {\r\n            // If it's a file, decode and set the file content\r\n            const content = response.data.encoding === 'base64' ? atob(response.data.content) : response.data.content;\r\n            setContents(content);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n          setError('Failed to load file content.');\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [repoFullName, filePath]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  // If contents is an array, it's a directory listing\r\n  if (Array.isArray(contents)) {\r\n    return (\r\n      <ul>\r\n        {contents.map(file => (\r\n          <li key={file.sha}>{file.name}</li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  // If contents is a string, it's the file content\r\n  return (\r\n    <pre>\r\n      <code>\r\n        {contents}\r\n      </code>\r\n    </pre>\r\n  );\r\n};\r\n\r\nexport default FileViewer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}