{"ast":null,"code":"// import React, { useRef, useEffect } from 'react';\n// import Webcam from 'react-webcam';\n// import * as faceapi from 'face-api.js';\n\n// const MyFaceOverlayComponent = () => {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n\n//   const handleVideoOnPlay = () => {\n//     setInterval(async () => {\n//       if (\n//         webcamRef.current &&\n//         webcamRef.current.video.readyState === 4\n//       ) {\n//         const video = webcamRef.current.video;\n//         const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks();\n\n//         // Get the context of the canvas\n//         const ctx = canvasRef.current.getContext('2d');\n//         canvasRef.current.width = video.videoWidth;\n//         canvasRef.current.height = video.videoHeight;\n\n//         // Clear the canvas\n//         ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n//         // Draw detections or overlay image based on detections\n//         detections.forEach(detection => {\n//           // Example: draw a rectangle around detected faces\n//           // You would replace this with drawing your face image\n//           const { x, y, width, height } = detection.detection.box;\n//           ctx.strokeStyle = \"#ff0000\";\n//           ctx.lineWidth = 2;\n//           ctx.strokeRect(x, y, width, height);\n//         });\n//       }\n//     }, 100);\n//   };\n\n//   useEffect(() => {\n//     loadModels();\n//   }, []);\n\n//   return (\n//     <div>\n//       <Webcam ref={webcamRef} onPlay={handleVideoOnPlay} style={{display: 'none'}} />\n//       <canvas ref={canvasRef} style={{position: 'absolute', top: 0, left: 0}} />\n//     </div>\n//   );\n// };\n\n// export default MyFaceOverlayComponent;","map":{"version":3,"names":[],"sources":["C:/Users/dahne/Resume/soggy-bread/client/src/components/mirror/MyFaceOverlay.js"],"sourcesContent":["// import React, { useRef, useEffect } from 'react';\r\n// import Webcam from 'react-webcam';\r\n// import * as faceapi from 'face-api.js';\r\n\r\n// const MyFaceOverlayComponent = () => {\r\n//   const webcamRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n\r\n//   const handleVideoOnPlay = () => {\r\n//     setInterval(async () => {\r\n//       if (\r\n//         webcamRef.current &&\r\n//         webcamRef.current.video.readyState === 4\r\n//       ) {\r\n//         const video = webcamRef.current.video;\r\n//         const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks();\r\n\r\n//         // Get the context of the canvas\r\n//         const ctx = canvasRef.current.getContext('2d');\r\n//         canvasRef.current.width = video.videoWidth;\r\n//         canvasRef.current.height = video.videoHeight;\r\n\r\n//         // Clear the canvas\r\n//         ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n\r\n//         // Draw detections or overlay image based on detections\r\n//         detections.forEach(detection => {\r\n//           // Example: draw a rectangle around detected faces\r\n//           // You would replace this with drawing your face image\r\n//           const { x, y, width, height } = detection.detection.box;\r\n//           ctx.strokeStyle = \"#ff0000\";\r\n//           ctx.lineWidth = 2;\r\n//           ctx.strokeRect(x, y, width, height);\r\n//         });\r\n//       }\r\n//     }, 100);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     loadModels();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <Webcam ref={webcamRef} onPlay={handleVideoOnPlay} style={{display: 'none'}} />\r\n//       <canvas ref={canvasRef} style={{position: 'absolute', top: 0, left: 0}} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MyFaceOverlayComponent;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}